<?php
namespace App\Services\Ventas;

use App\Repositories\Ventas\PedidoRepositoryInterface;
use App\Repositories\Ventas\Pedido_CombinacionRepositoryInterface;
use App\Repositories\Ventas\Pedido_Combinacion_TalleRepositoryInterface;
use App\Repositories\Ventas\Pedido_Combinacion_EstadoRepositoryInterface;
use App\Repositories\Ventas\Ordentrabajo_Combinacion_TalleRepositoryInterface;
use App\Repositories\Ventas\Ordentrabajo_TareaRepositoryInterface;
use App\Services\Configuracion\ImpuestoService;
use App\Queries\Ventas\PedidoQueryInterface;
use App\Queries\Ventas\ClienteQueryInterface;
use App\Queries\Ventas\OrdentrabajoQueryInterface;
use App\Models\Stock\Articulo;
use App\Models\Stock\Combinacion;
use App\Models\Stock\Categoria;
use App\Models\Stock\Talle;
use LynX39\LaraPdfMerger\Facades\PdfMerger;
use Illuminate\Support\Facades\DB;
use App;
use PDF;
use Auth;

class PedidoService 
{
	protected $pedidoRepository;
	protected $pedido_combinacionRepository;
	protected $pedido_combinacion_talleRepository;
	protected $pedido_combinacion_estadoRepository;
	protected $ordentrabajo_combinacion_talleRepository;
	protected $ordentrabajo_tareaRepository;
    protected $ordentrabajoQuery;
	protected $pedidoQuery;
	protected $clienteQuery;
	protected $impuestoService;
	protected $ordentrabajoService;

    public function __construct(PedidoRepositoryInterface $pedidorepository,
    							Pedido_CombinacionRepositoryInterface $pedidocombinacionrepository,
    							Pedido_Combinacion_TalleRepositoryInterface $pedidocombinaciontallerepository,
								Pedido_Combinacion_EstadoRepositoryInterface $pedidocombinacionestadorepository,
    							Ordentrabajo_Combinacion_TalleRepositoryInterface $ordentrabajocombinaciontallerepository,
								Ordentrabajo_TareaRepositoryInterface $ordentrabajotarearepository,
								OrdentrabajoQueryInterface $ordentrabajoquery,
								PedidoQueryInterface $pedidoquery,
								ClienteQueryInterface $clientequery,
								ImpuestoService $impuestoservice,
								OrdentrabajoService $ordentrabajoservice
								)
    {
        $this->pedidoRepository = $pedidorepository;
        $this->pedido_combinacionRepository = $pedidocombinacionrepository;
        $this->pedido_combinacion_talleRepository = $pedidocombinaciontallerepository;
		$this->pedido_combinacion_estadoRepository = $pedidocombinacionestadorepository;
        $this->ordentrabajo_combinacion_talleRepository = $ordentrabajocombinaciontallerepository;
		$this->ordentrabajo_tareaRepository = $ordentrabajotarearepository;
		$this->ordentrabajoQuery = $ordentrabajoquery;
        $this->pedidoQuery = $pedidoquery;
        $this->clienteQuery = $clientequery;
        $this->impuestoService = $impuestoservice;
		$this->ordentrabajoService = $ordentrabajoservice;
    }

	public function leePedido($id)
	{
        $pedido = $this->pedidoRepository->find($id);

        return $pedido;
	}

	public function leePedidosPendientes($cliente_id)
	{
        //$hay_pedidos = $this->pedidoQuery->first();

		//if (!$hay_pedidos)
		//{
			//$this->pedidoRepository->sincronizarConAnita();
			//$this->pedido_combinacionRepository->sincronizarConAnita();
			//$this->pedido_combinacion_talleRepository->sincronizarConAnita();
		//}

		return $this->pedidoQuery->allPendienteIndex($cliente_id);
	}

	/* Lee pedidos pendientes para generacion de OT por articulo / combinacion */
	public function leePedidosPendientesOt($request)
	{
		return $this->pedidoQuery->allPendienteOt($request->articulo_id, $request->combinacion_id);
	}

	// Genera datos para reporte general de pedidos
	public function generaDatosRepGeneralPedidos($tipolistado, $estado, $mventa_id,
												$desdefecha, $hastafecha, 
												$desdevendedor_id, $hastavendedor_id,
												$desdecliente_id, $hastacliente_id,
												$desdearticulo_id, $hastaarticulo_id,
												$desdelinea_id, $hastalinea_id,
												$desdefondo_id, $hastafondo_id)
	{
		$data = $this->pedidoQuery->findPorRangoFecha($tipolistado, $mventa_id, $desdefecha, $hastafecha,
									$desdevendedor_id, $hastavendedor_id,
									$desdecliente_id, $hastacliente_id,
									$desdearticulo_id, $hastaarticulo_id,
									$desdelinea_id, $hastalinea_id,
									$desdefondo_id, $hastafondo_id);

		// Arma datos para listado
		switch($tipolistado)
		{
			case 'CLIENTE':
			case 'ARTICULO':
			case 'LINEA':
			case 'VENDEDOR':
			case 'FONDO':
				$datas = [];
				$medidas = [];
				$anterId = 0;
				foreach($data as $pedido)
				{
					if ($anterId != $pedido['pedido_combinacion_id'])
					{
						if ($anterId != 0)
						{
							$datas[] = ['numeropedido' => $numeropedido, 
								'estadopedido' => $estadopedido,
								'numeroot' => $numeroot,
								'fecha' => $fecha,
								'nombrevendedor' => $nombrevendedor,
								'nombrecliente' => $nombrecliente,
								'codigocliente' => $codigocliente,
								'estadocliente' => $estadocliente,
								'nombrearticulo' => $nombrearticulo,
								'sku' => $sku,
								'combinacion' => $combinacion,
								'nombrefondo' => $nombrefondo,
								'cliente_id' => $cliente_id,
								'vendedor_id' => $vendedor_id,
								'linea_id' => $linea_id,
								'nombrelinea' => $nombrelinea,
								'fondo_id' => $fondo_id,
								'articulo_id' => $articulo_id,
								'medidas' => $medidas
							];
						}

						$anterId = $pedido['pedido_combinacion_id'];
						$medidas = [];

						$numeropedido = $pedido['codigo'];
						$estadopedido = $pedido['codigoot'] != '' ? 'EN PRODUCCION' : 'PENDIENTE';

						// Busca tareas para definir el estado real
						if ($pedido['codigoot'] != '')
						{
							$this->ordentrabajoService->traeEstadoOt($pedido['ordentrabajo_id'], $pedido['pedido_combinacion_id'], 
																	$nombretarea);

							if ($nombretarea != '')
								$estadopedido = $nombretarea;
						}

						$numeroot = $pedido['codigoot'];
						$fecha = $pedido['fecha'];
						$nombrevendedor = $pedido['nombrevendedor'];
						$nombrecliente = $pedido['nombrecliente'];
						$codigocliente = $pedido['codigocliente'];
						$estadocliente = $pedido['estadocliente'];
						$nombrearticulo = $pedido['nombrearticulo'];
						$combinacion = $pedido['nombrecombinacion'];
						$nombrefondo = $pedido['nombrefondo'];
						$cliente_id = $pedido['cliente_id'];
						$vendedor_id = $pedido['vendedor_id'];
						$linea_id = $pedido['linea_id'];
						$nombrelinea = $pedido['nombrelinea'];
						$fondo_id = $pedido['fondo_id'];
						$articulo_id = $pedido['articulo_id'];
						$sku = $pedido['sku'];
					}
					
					$medidas[] = ['medida' => $pedido['nombretalle'], 'cantidad' => $pedido['cantidad']];
				}
				if ($anterId != 0)
				{
					$datas[] = ['numeropedido' => $numeropedido, 
								'estadopedido' => $estadopedido,
								'numeroot' => $numeroot,
								'fecha' => $fecha,
								'nombrevendedor' => $nombrevendedor,
								'nombrecliente' => $nombrecliente,
								'codigocliente' => $codigocliente,
								'estadocliente' => $estadocliente,
								'nombrearticulo' => $nombrearticulo,
								'sku' => $sku,
								'combinacion' => $combinacion,
								'nombrefondo' => $nombrefondo,
								'cliente_id' => $cliente_id,
								'vendedor_id' => $vendedor_id,
								'linea_id' => $linea_id,
								'nombrelinea' => $nombrelinea,
								'fondo_id' => $fondo_id,
								'articulo_id' => $articulo_id,
								'medidas' => $medidas
							];		
				}
				break;
		}

		// Filtra por estado
		$dataFiltrado = [];
		foreach ($datas as $item)
		{
			$cc = false;
			switch($estado)
			{
				case 'PENDIENTES':
					if ($item['numeroot'] == '' || $item['numeroot'] == '0')
						$cc = true;
					break;
				case 'EN PRODUCCION':
					if ($item['numeroot'] != '' && $item['numeroot'] != '0')
						$cc = true;
					break;
				case 'TERMINADOS':
					if ($item['estadopedido'] == 'TERMINADA')
						$cc = true;
					break;
				case 'FACTURADOS':
					if ($item['estadopedido'] == 'FACTURADA')
						$cc = true;
					break;
				default:
					$cc = true;
			}
			if ($cc)
				$dataFiltrado[] = $item;
		}
		
		return(['data' => $dataFiltrado]);
	}

	// Genera datos para reporte de consumo de materiales

	public function generaDatosRepConsumoMateriales($tipolistado, $estado,
												$tipocapellada, $tipoavio,
												$desdefecha, $hastafecha, 
												$desdecliente_id, $hastacliente_id,
												$desdearticulo_id, $hastaarticulo_id,
												$desdelinea_id, $hastalinea_id,
												$desdecolor_id, $hastacolor_id,
												$desdematerialcapellada_id, $hastamaterialcapellada_id,
												$desdematerialavio_id, $hastamaterialavio_id)
	{
		switch($tipolistado)
		{
		case 'CAPELLADA':
			$data = $this->pedidoQuery->findPorMaterialCapellada($tipolistado, 
								$tipocapellada, 
								$desdefecha, $hastafecha,
								$desdecliente_id, $hastacliente_id,
								$desdearticulo_id, $hastaarticulo_id,
								$desdelinea_id, $hastalinea_id,
								$desdecolor_id, $hastacolor_id,
								$desdematerialcapellada_id, $hastamaterialcapellada_id);
			break;
		case 'AVIO':
			$data = $this->pedidoQuery->findPorMaterialAvio($tipolistado, 
								$tipoavio, 
								$desdefecha, $hastafecha,
								$desdecliente_id, $hastacliente_id,
								$desdearticulo_id, $hastaarticulo_id,
								$desdelinea_id, $hastalinea_id,
								$desdecolor_id, $hastacolor_id,
								$desdematerialavio_id, $hastamaterialavio_id);
			break;
		}

		$datas = [];
		$medidas = [];
		$anterId = 0;
		$anterMaterialId = 0;
		$anterColor = '';
		$anterTipo = 'A';
		foreach($data as $pedido)
		{
			if ($anterId != $pedido['pedido_combinacion_id'] || $anterMaterialId != $pedido['materialcapellada_id'] ||
				ord($anterTipo) != ord($pedido['tipo']) ||
				$anterColor != $pedido['nombrecolor'])
			{
				if ($anterId != 0)
				{
					$datas[] = ['numeropedido' => $numeropedido, 
						'estadopedido' => $estadopedido,
						'numeroot' => $numeroot,
						'fecha' => $fecha,
						'nombrevendedor' => $nombrevendedor,
						'nombrecliente' => $nombrecliente,
						'codigocliente' => $codigocliente,
						'nombrearticulo' => $nombrearticulo,
						'sku' => $sku,
						'combinacion' => $combinacion,
						'nombrefondo' => $nombrefondo,
						'cliente_id' => $cliente_id,
						'vendedor_id' => $vendedor_id,
						'linea_id' => $linea_id,
						'fondo_id' => $fondo_id,
						'articulo_id' => $articulo_id,
						'nombrematerialcapellada' => $nombrematerialcapellada,
						'materialcapellada_id' => $materialcapellada_id,
						'nombrematerialavio' => $nombrematerialavio,
						'materialavio_id' => $materialavio_id,
						'nombrecolor' => $nombrecolor,
						'tipo' => $tipo,
						'medidas' => $medidas
					];
				}

				$anterId = $pedido['pedido_combinacion_id'];
				$anterMaterialId = $pedido['materialcapellada_id'];
				$anterColor = $pedido['nombrecolor'];
				$anterTipo = $pedido['tipo'];

				$medidas = [];

				$numeropedido = $pedido['codigo'];
				$estadopedido = $pedido['codigoot'] != '' ? 'EN PRODUCCION' : 'PENDIENTE';

				// Busca tareas para definir el estado real
				if ($pedido['codigoot'] != '')
				{
					$this->ordentrabajoService->traeEstadoOt($pedido['ordentrabajo_id'], $pedido['pedido_combinacion_id'], 
															$nombretarea);

					if ($nombretarea != '')
						$estadopedido = $nombretarea;
				}

				$numeroot = $pedido['codigoot'];
				$fecha = $pedido['fecha'];
				$nombrevendedor = $pedido['nombrevendedor'];
				$nombrecliente = $pedido['nombrecliente'];
				$codigocliente = $pedido['codigocliente'];
				$nombrearticulo = $pedido['nombrearticulo'];
				$combinacion = $pedido['nombrecombinacion'];
				$nombrefondo = $pedido['nombrefondo'];
				$cliente_id = $pedido['cliente_id'];
				$vendedor_id = $pedido['vendedor_id'];
				$linea_id = $pedido['linea_id'];
				$fondo_id = $pedido['fondo_id'];
				$articulo_id = $pedido['articulo_id'];
				$sku = $pedido['sku'];
				if ($tipolistado == 'CAPELLADA')
				{
					$nombrematerialcapellada = $pedido['nombrematerialcapellada'];
					$materialcapellada_id = $pedido['materialcapellada_id'];
				}
				else
					$nombrematerialcapellada = $materialcapellada_id = '';

				if ($tipolistado == 'AVIO')
				{ 
					$nombrematerialavio = $pedido['nombrematerialavio'];
					$materialavio_id = $pedido['materialavio_id'];
				}
				else	
					$nombrematerialavio = $materialavio_id = '';

				$nombrecolor = $pedido['nombrecolor'];
				$tipo = $pedido['tipo'];
			}
			$consumo = 0;
			// Calcula el consumo
			calculaConsumo($consumo, $pedido['nombretalle'], $pedido['cantidad'], 
							$pedido['consumo1'], $pedido['consumo2'], 
							$pedido['consumo3'], $pedido['consumo4']);
			
			$medidas[] = ['medida' => $pedido['nombretalle'], 'cantidad' => $pedido['cantidad'], 'consumo' => $consumo];
		}
		if ($anterId != 0)
		{
			$datas[] = ['numeropedido' => $numeropedido, 
						'estadopedido' => $estadopedido,
						'numeroot' => $numeroot,
						'fecha' => $fecha,
						'nombrevendedor' => $nombrevendedor,
						'nombrecliente' => $nombrecliente,
						'codigocliente' => $codigocliente,
						'nombrearticulo' => $nombrearticulo,
						'sku' => $sku,
						'combinacion' => $combinacion,
						'nombrefondo' => $nombrefondo,
						'cliente_id' => $cliente_id,
						'vendedor_id' => $vendedor_id,
						'linea_id' => $linea_id,
						'fondo_id' => $fondo_id,
						'articulo_id' => $articulo_id,
						'nombrematerialcapellada' => $nombrematerialcapellada,
						'materialcapellada_id' => $materialcapellada_id,
						'nombrematerialavio' => $nombrematerialavio,
						'materialavio_id' => $materialavio_id,
						'nombrecolor' => $nombrecolor,
						'tipo' => $tipo,
						'medidas' => $medidas
					];		
		}

		// Filtra por estado
		$dataFiltrado = [];
		foreach ($datas as $item)
		{
			
			$cc = false;
			switch($estado)
			{
				case 'PENDIENTES':
					if ($item['numeroot'] == '' || $item['numeroot'] == '0' || $item['numeroot'] == '-1')
						$cc = true;
					break;
				case 'EN PRODUCCION':
					if ($item['numeroot'] != '' && $item['numeroot'] != '0' && $item['numeroot'] == '-1')
						$cc = true;
					break;
				case 'TERMINADOS':
					if ($item['estadopedido'] == 'TERMINADA')
						$cc = true;
					break;
				case 'FACTURADOS':
					if ($item['estadopedido'] == 'FACTURADA')
						$cc = true;
					break;
				default:
					$cc = true;
			}
			if ($cc)
				$dataFiltrado[] = $item;
		}

		return(['data' => $dataFiltrado]);
	}

	public function listarPedido($id)
	{
	  	ini_set('memory_limit', '512M');

		$pdfMerger = PDFMerger::init();

		$data = $this->pedidoQuery->leePedidoporId($id);
		$pedido = $data[0];
		$nombre_pdf = 'pedido-'.$id.'-'.$pedido->clientes->nombre;

		$view =  \View::make('exports.ventas.pedido', compact('pedido'))
			    ->render();
		$path = storage_path('pdf/pedido');

        $pdf = App::make('dompdf.wrapper');
        $pdf->loadHTML($view)->save($path.'/'.$nombre_pdf.'.pdf');
        $pdf->download($nombre_pdf.'.pdf');

		return response()->download($path.'/'.$nombre_pdf.'.pdf');

		// Por ahora queda sin hacer el merge
		//$pdfMerger->addPDF($path.'/'.$nombre_pdf.'.pdf', 'all');

		//$pdfMerger->merge();
		//$pdfMerger->save($path.'/pedido.pdf', "file");

		//return response()->download($path.'/pedido.pdf');
	}

	public function listarPreFactura($id, $items_id)
	{
	  	ini_set('memory_limit', '512M');

		$pdfMerger = PDFMerger::init();

		$data = $this->pedidoQuery->leePedidoporId($id);
		$pedido = $data[0];
		$nombre_pdf = 'pedido-'.$id.'-'.$pedido->clientes->nombre;

		$itemsId = explode(",", $items_id);

		// Arma tablas para calculo de impuestos
		// Lee el cliente
		$cliente = $this->clienteQuery->traeClienteporId($pedido->cliente_id);

		if ($cliente)
		{
			// Asigna el descuento de cliente siempre
			if ($cliente->descuento != 0)
				$pedido->descuento = $cliente->descuento;
		}

		$tblImpuesto = [];
		foreach($pedido->pedido_combinaciones as $pedidoitem)
		{
			$articulo = Articulo::where('id',$pedidoitem->articulo_id)->first();

			if ($articulo && in_array($pedidoitem->id, $itemsId))
			{
				$tblImpuesto[] = ["cantidad" => $pedidoitem->cantidad,
								"precio" => $pedidoitem->precio,
								"descuento" => $pedidoitem->descuento,
								"descuentointegrado" => $pedidoitem->descuentointegrado,
								"descuentofinal" => $pedido->descuento,
								"descuentointegradofinal" => $pedido->descuentointegrado,
								"incluyeimpuesto" => $pedidoitem->incluyeimpuesto,
								"impuesto_id" => $articulo->impuesto_id,
								];
			}
		}

		// Arma datos del cliente
		$datosCliente = [ "condicioniva_id" => $cliente->condicioniva_id,
						  "nroinscripcion" => $cliente->nroinscripcion,
						  "retieneiva" => $cliente->retieneiva,
						  "condicioniibb" => $cliente->condicioniibb,
						  "provincia" => $cliente->provincia_id,
						];

		// Calcula impuestos
		$conceptosTotales = $this->impuestoService->calculaImpuestoVenta($tblImpuesto, $datosCliente);

		$view =  \View::make('exports.ventas.prefactura', compact('pedido', 'itemsId', 'conceptosTotales'))
			    ->render();
		$path = storage_path('pdf/pedido');

        $pdf = App::make('dompdf.wrapper');
        $pdf->loadHTML($view)->save($path.'/'.$nombre_pdf.'.pdf');
        $pdf->download($nombre_pdf.'.pdf');

		return response()->download($path.'/'.$nombre_pdf.'.pdf');
  	}

	// Anula item del pedido 
	public function anularItemPedido($id, $codigoot, $motivocierrepedido_id, $cliente_id = null)
	{
	  	$pedido = $this->pedido_combinacionRepository->findOrFail($id);
		$orden = 0;
		if ($pedido)
		{
		  	// Trae numero de item para grabar en Anita
		  	$orden = $pedido->numeroitem;

		  	$data = [];
		  	if ($pedido->estado == 'A')
			{
			  	$nuevoestado = ' ';
			  	$estado = 'recuperado';
			}
			else
			{
			  	$nuevoestado = 'A';
			  	$estado = 'anulado';
			}
			$data = ['estado' => $nuevoestado];

			DB::beginTransaction();
			try {
				$pedido = $this->pedido_combinacionRepository->update($data, $id);
			
				if ($pedido)
				{
					// Si tiene cliente actualiza la OT
					if ($cliente_id)
					{
						// Actualiza la OT
						$ot = $this->ordentrabajoQuery->leeOrdenTrabajoPorCodigo($codigoot);

						if ($ot)
						{
							// Lee los items
							foreach ($ot->ordentrabajo_combinacion_talles as $item)
							{
								// Actualiza el nuevo cliente
								$this->ordentrabajo_combinacion_talleRepository->update(
															['cliente_id' => $cliente_id], $item->id);
							}
						}
					}
					// Graba estado
					$pedido_combinacion_estado = $this->pedido_combinacion_estadoRepository->create([
						'pedido_combinacion_id' => $id,
						'motivocierrepedido_id' => $motivocierrepedido_id,
						'estado' => $nuevoestado,
						'observacion' => $estado
					]);
				}
				DB::commit();
			} catch (\Exception $e) {
				DB::rollback();
				return $e->getMessage();
				$estado = 'error';
			}
			
			return(['retorno'=>$estado]);
		}
		else
			return(['retorno'=>'error']);
	}

	public function guardaPedido($data, $funcion, $id = null)
	{
	  	ini_set('memory_limit', '512M');

		$cliente = $this->clienteQuery->traeClienteporId($data['cliente_id']);

		$data['estado'] = '0';
		$data['tipo'] = 'PED';
		$data['letra'] = $cliente->condicionivas->letra;
		$data['sucursal'] = $data['mventa_id'];
		$data['usuario_id'] = Auth::user()->id;
		$data['descuentointegrado'] = ' ';

		if (!array_key_exists('leyenda',$data))
			$data['leyenda'] = ' ';

		DB::beginTransaction();

		try 
		{
			if ($funcion == 'create')
			{
				$id = $this->pedidoRepository->all()->last()->id;

				$data['codigo'] = $id + 1;
				$data['nro'] = 0;

				// Guarda maestro de pedidos 
				$pedido = $this->pedidoRepository->create($data);
			}
			else
			{
				$data['nro'] = substr($data['codigo'], 12, 8);

				// Actualiza maestro de pedidos
				$pedido = $this->pedidoRepository->update($data, $id);
			}

			// Guarda items
			if ($pedido)
			{
				$data['pedido_id'] = ($funcion == 'update' ? $id : $pedido->id);

				// Borra los registros de movimientos antes de grabar nuevamente
				if ($funcion == 'update')
				{
					// Verifica los numeros de ot
					$ot = [];
					$ot_stock_id = [];
					foreach($data['ids'] as $pedido_combinacion_id)
					{
						// Si no tiene referencia verifica si existe igual
						$ped = $this->pedido_combinacionRepository->findPorPedidoCombinacionId($pedido_combinacion_id);

						if ($ped)
						{
							$ot[] = $ped[0]->ordentrabajo_id;

							if ($ped[0]->ordentrabajo_stock_id != '')
								$ot_stock_id[] = $ped[0]->ordentrabajo_stock_id;
							else
								$ot_stock_id[] = 0;
						}
						else
						{
							$ot[] = '';
							$ot_stock_id[] = 0;
						}
					}

					$this->pedido_combinacionRepository->deleteporpedido($data['pedido_id']);
				}

				$articulos = $data['articulos_id'];
				$combinaciones = $data['combinaciones_id'];
				$modulos = $data['modulos_id'];
				$numeroitems = $data['items'];
				$cantidades = $data['cantidades'];
				$precios = $data['precios'];
				$listaprecios = $data['listasprecios_id'];
				$incluyeimpuestos = $data['incluyeimpuestos'];
				$monedas = $data['monedas_id'];
				$descuentos = $data['descuentos'];
				$medidas = $data['medidas'];
				$observaciones = $data['observaciones'];
				$ot_ids = $ot;
				$ot_stock_ids = $ot_stock_id;

				for ($i_comb = 0; $i_comb < count($articulos); $i_comb++) 
				{
					if ($articulos[$i_comb] != '') 
					{
						// Lee el articulo
						$articulo = Articulo::select('categoria_id','subcategoria_id','linea_id')->
									where('id',$articulos[$i_comb])->first();

						$categoria_id = $subcategoria_id = $linea_id = NULL;
						$categoria_codigo = ' ';
						if ($articulo)
						{
							$categoria_id = $articulo->categoria_id;
							$subcategoria_id = $articulo->subcategoria_id;
							$linea_id = $articulo->linea_id;

							$categoria = Categoria::where('id' , $articulo->categoria_id)->first();
							if ($categoria)
								$categoria_codigo = $categoria->codigo;
						}

						$ordentrabajo = '';
						if ($funcion == 'create')
						{
							$ot_ids[$i_comb] = -1;
							$data['nro_orden'] = -1;
						}
						else
						{
							// Lee la OT
							if ($ot_ids[$i_comb] > 0)
							{
								$ordentrabajo = $this->ordentrabajoQuery->leeOrdenTrabajo($ot_ids[$i_comb]);

								// pasa nro. de orden para anita
								if ($ordentrabajo)
									$data['nro_orden'] = $ordentrabajo->codigo ?? -1;
								else
									$data['nro_orden'] = -1;
							}
							else
								$data['nro_orden'] = -1;
						}

						// Guarda item
						$pedido_combinacion = $this->pedido_combinacionRepository->create(
								$data,
								$data['pedido_id'],
								$articulos[$i_comb],
								$combinaciones[$i_comb],
								$numeroitems[$i_comb],
								$modulos[$i_comb],
								str_replace(',','',$cantidades[$i_comb]),
								str_replace(',','',$precios[$i_comb]),
								($listaprecios[$i_comb] == 0 ? 1 : $listaprecios[$i_comb]),
								$incluyeimpuestos[$i_comb],
								$monedas[$i_comb],
								$descuentos[$i_comb],
								$categoria_id,
								$subcategoria_id,
								$linea_id,
								$ot_ids[$i_comb],
								$observaciones[$i_comb],
								$medidas[$i_comb],
								$funcion
								);
								dd($pedido_combinacion);

						// Borra los items de la OT asociada para volver a generarla
						if ($funcion == 'update' && $ot_ids[$i_comb] > 0)
						{
							$this->ordentrabajo_combinacion_talleRepository->deleteporordentrabajo($ot_ids[$i_comb]);
						}

						// Abre medidas de cada item
						$jtalles = json_decode($medidas[$i_comb]);
						foreach ($jtalles as $value)
						{
							// Guarda apertura de talles
							if ($value->cantidad > 0)
							{
								$pedido_combinacion_talle = $this->pedido_combinacion_talleRepository->create(
																			$pedido_combinacion->id, 
																			$value->talle_id, 
																			$value->cantidad, 
																			$value->precio
																			);

								// Guarda ot
								if ($ot_ids[$i_comb] > 0 && $funcion == 'update') 
								{
									$combinacion = Combinacion::find($combinaciones[$i_comb]);

									$talle = Talle::find($value->talle_id);
									if ($talle)
										$medida = $talle->nombre;
									else
										$medida = '';

									// Lee la OT
									$ordentrabajo = $this->ordentrabajoQuery->leeOrdenTrabajoPorCodigo($ot_ids[$i_comb]);

									$dataErp = array(
												'ordentrabajo_id' => $ordentrabajo->id,
												'pedido_combinacion_talle_id' => $pedido_combinacion_talle->id,
												'cliente_id' => $data['cliente_id'],
												'estado' => $data['estado'],
												'usuario_id' => $data['usuario_id'],
												'nro_orden' => $ordentrabajo->codigo ?? -1,
												'articulo' => str_pad($articulo->sku, 13, "0", STR_PAD_LEFT),
												'nro_renglon' => $numeroitems[$i_comb],
												'color' => $combinacion->codigo,
												'medida' => $medida,
												'cantidad' => $value->cantidad,
												'forro' => ' ',
												'cliente' => str_pad($cliente->codigo, 6, "0", STR_PAD_LEFT),
												'fecha' => $ordentrabajo->fecha ?? 0,
												'agrupacion' => str_pad($categoria_codigo, 4, "0", STR_PAD_LEFT),
												'estado' => $ordentrabajo->estado ?? '',
												'cantfact' => 0,
												'aplique' => 0,
												'ordentrabajo_stock_id' => $ot_stock_ids[$i_comb]
         										);

									$this->ordentrabajo_combinacion_talleRepository->create($dataErp);
								}
							}
						}
					}
				}
			}
			DB::commit();
		} catch (\Exception $e) 
		{
			DB::rollback();
			dd($e->getMessage());
			return $e->getMessage();
		}
		
		return ['id'=>$data['pedido_id'], 'codigo'=>$data['codigo']];
	}

	public function guardaItemPedido($data, $funcion, $id)
	{
		$data['usuario_id'] = Auth::user()->id;

		DB::beginTransaction();

		try 
		{
			// Borra las medidas
			if ($funcion == 'update' && $data['pedido_combinacion_id'] > 0)
			{
				$this->pedido_combinacion_talleRepository->deleteporpedido_combinacion($data['pedido_combinacion_id']);
			}

			// Abre medidas de cada item
			$jtalles = json_decode($data['data']);
			$totPares = 0;
			foreach ($jtalles as $value)
			{
				// Guarda apertura de talles
				if ($value->cantidad ?? '' > 0)
				{
					$totPares += $value->cantidad;

					// Guarda pedido
					$pedido_combinacion_talle = $this->pedido_combinacion_talleRepository->create(
																$data['pedido_combinacion_id'], 
																$value->talle_id, 
																$value->cantidad, 
																$value->precio
																);

					// Guarda ot
					if ($data['ordentrabajo_id'] > 0 && $funcion == 'update') 
					{
						$talle = Talle::find($value->talle_id);
						if ($talle)
							$medida = $talle->nombre;
						else
							$medida = '';

						$dataErp = array(
									'ordentrabajo_id' => $data['ordentrabajo_id'],
									'pedido_combinacion_talle_id' => $pedido_combinacion_talle->id,
									'cliente_id' => $data['cliente_id'],
									'usuario_id' => $data['usuario_id'],
									'ordentrabajo_stock_id' => 0,
									'estado' => ''
								);

						$this->ordentrabajo_combinacion_talleRepository->create($dataErp);
					}
				}
			}

			// Actualiza cantidad de pares en pedido_combinacion
			$this->pedido_combinacionRepository->update(['cantidad' => $totPares], $data['pedido_combinacion_id']);

			DB::commit();
		} catch (\Exception $e) 
		{
			DB::rollback();
			dd($e->getMessage());
			return $e->getMessage();
		}
	}

	public function borraPedido($id)
	{
		$fl_borro = false;

		$data = $this->pedidoQuery->leePedidoporId($id);

        if (($pedido = $this->pedidoRepository->delete($id)))
		{
			$tipo = substr($data[0]->codigo, 0, 3);
			$letra = substr($data[0]->codigo, 4, 1);
			$sucursal = substr($data[0]->codigo, 6, 5);
			$nro = substr($data[0]->codigo, 12, 8);

        	$pedido_combinacion = $this->pedido_combinacionRepository->deleteporpedido($id, $tipo, $letra, $sucursal, $nro);

			$fl_borro = true;
		}

		return ($fl_borro);
	}

	// Cierre de pedidos pendientes por fecha 

	public function cierrePedido($data)
	{
		// Trae pedidos por fecha
		$pedidos_combinacion = $this->pedido_combinacionRepository->leePedidosSinOtPorFecha($data['hastafecha']);

		$motivocierrepedido_id = $data['motivocierrepedido_id'];

		foreach($pedidos_combinacion as $pedido)
		{
			// Trae estado
			$estado = $this->pedido_combinacion_estadoRepository->traeEstado($pedido->id);

			if ($estado != 'A')
			{
			  	$nuevoestado = 'A';
			  	$estado = 'anulado';
			
				$data = ['estado' => $nuevoestado];

				DB::beginTransaction();
				try {
					$this->pedido_combinacionRepository->update($data, $pedido->id);
					
					// Graba estado
					$pedido_combinacion_estado = $this->pedido_combinacion_estadoRepository->create([
						'pedido_combinacion_id' => $pedido->id,
						'motivocierrepedido_id' => $motivocierrepedido_id,
						'estado' => $nuevoestado,
						'observacion' => 'Cierre de pedido'
					]);

					DB::commit();
				} catch (\Exception $e) {
					DB::rollback();
					return $e->getMessage();
				}
			}
		}

		return 'correcto';
	}
}
